// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Warshti.Entities;

namespace Musan.Entities.Migrations
{
    [DbContext(typeof(WScoreContext))]
    partial class WScoreContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.1");

            modelBuilder.Entity("WScore.Entities.Identity.RefreshToken", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("CreationDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<DateTime>("ExpiryDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<bool>("Invalidated")
                        .HasColumnType("BIT");

                    b.Property<string>("JwtId")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)");

                    b.Property<bool>("Used")
                        .HasColumnType("BIT");

                    b.Property<int>("UserId")
                        .HasColumnType("INT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshToken", "Identity");
                });

            modelBuilder.Entity("WScore.Entities.Identity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Role", "Identity");
                });

            modelBuilder.Entity("WScore.Entities.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaim", "Identity");
                });

            modelBuilder.Entity("WScore.Entities.Identity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Created")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("VARCHAR(350)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsActive")
                        .HasColumnType("BIT");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("VARCHAR(25)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ResetToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ResetTokenExpires")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(25)");

                    b.Property<int>("UserTypeId")
                        .HasColumnType("int");

                    b.Property<string>("VerificationToken")
                        .IsRequired()
                        .HasColumnType("VARCHAR(500)");

                    b.HasKey("Id");

                    b.ToTable("User", "Identity");
                });

            modelBuilder.Entity("WScore.Entities.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim", "Identity");
                });

            modelBuilder.Entity("WScore.Entities.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin", "Identity");
                });

            modelBuilder.Entity("WScore.Entities.Identity.UserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", "Identity");
                });

            modelBuilder.Entity("WScore.Entities.Identity.UserToken", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginProvider", "UserId", "Name");

                    b.HasIndex("UserId");

                    b.ToTable("UserToken", "Identity");
                });

            modelBuilder.Entity("Warshti.Entities.Car.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(50)");

                    b.HasKey("Id")
                        .HasName("PK_Color");

                    b.ToTable("Color", "Car");
                });

            modelBuilder.Entity("Warshti.Entities.Car.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)");

                    b.HasKey("Id")
                        .HasName("PK_Company");

                    b.ToTable("Company", "Car");
                });

            modelBuilder.Entity("Warshti.Entities.Car.Fault", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)");

                    b.HasKey("Id")
                        .HasName("PK_Fault");

                    b.ToTable("Fault", "Maintenance");
                });

            modelBuilder.Entity("Warshti.Entities.Car.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)");

                    b.HasKey("Id")
                        .HasName("PK_Model");

                    b.ToTable("Model", "Car");
                });

            modelBuilder.Entity("Warshti.Entities.Car.Transmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)");

                    b.HasKey("Id");

                    b.ToTable("Transmission", "Car");
                });

            modelBuilder.Entity("Warshti.Entities.Entities.Car.CarInformation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CarTransmission")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<int>("Company")
                        .HasColumnType("int");

                    b.Property<int>("Model")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CarsInformation");
                });

            modelBuilder.Entity("Warshti.Entities.Entities.DeviceToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Device_Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("User_Id")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DeviceTokens");
                });

            modelBuilder.Entity("Warshti.Entities.Entities.Maintenance.ServiceImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<byte[]>("Photo")
                        .IsRequired()
                        .HasColumnType("VARBINARY(MAX)");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INT");

                    b.HasKey("Id")
                        .HasName("PK_ServiceImage");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceImage", "WScore");
                });

            modelBuilder.Entity("Warshti.Entities.Identity.UserSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<bool>("AcceptRequest")
                        .HasColumnType("BIT");

                    b.Property<bool>("DeclineRequest")
                        .HasColumnType("BIT");

                    b.Property<bool>("EmailNotification")
                        .HasColumnType("BIT");

                    b.Property<int>("LanguageId")
                        .HasColumnType("INT");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_UserSetting");

                    b.HasIndex("LanguageId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserSetting", "Identity");
                });

            modelBuilder.Entity("Warshti.Entities.Maintenance.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)");

                    b.HasKey("Id")
                        .HasName("PK_Department");

                    b.ToTable("Department", "Maintenance");
                });

            modelBuilder.Entity("Warshti.Entities.Maintenance.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Comments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CompletionDate")
                        .HasColumnType("DATE");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("DATE");

                    b.Property<decimal>("EstimatedPrice")
                        .HasColumnType("NUMERIC(10,2)");

                    b.Property<DateTime>("ExpectedCompletionDate")
                        .HasColumnType("DATE");

                    b.Property<int>("FlowStatus")
                        .HasColumnType("int");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("VARCHAR(25)");

                    b.Property<int>("OrderProgress")
                        .HasColumnType("INT");

                    b.Property<int?>("OrderRating")
                        .HasColumnType("int");

                    b.Property<int>("OrderStatusId")
                        .HasColumnType("INT");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INT");

                    b.Property<int>("WorkshopId")
                        .HasColumnType("INT");

                    b.HasKey("Id")
                        .HasName("PK_Order");

                    b.HasIndex("ServiceId");

                    b.HasIndex("WorkshopId");

                    b.ToTable("Order", "Maintenance");
                });

            modelBuilder.Entity("Warshti.Entities.Maintenance.OrderStep", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("ActionDate")
                        .HasColumnType("DATE");

                    b.Property<int>("OrderId")
                        .HasColumnType("INT");

                    b.Property<int>("OrderStepStatus")
                        .HasColumnType("INT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)");

                    b.HasKey("Id")
                        .HasName("PK_OrderStep");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderStep", "Maintenance");
                });

            modelBuilder.Entity("Warshti.Entities.Maintenance.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(250)");

                    b.HasKey("Id")
                        .HasName("PK_PaymentMethod");

                    b.ToTable("PaymentMethod", "Maintenance");
                });

            modelBuilder.Entity("Warshti.Entities.Maintenance.Service", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("ColorId")
                        .HasColumnType("INT");

                    b.Property<int>("CompanyId")
                        .HasColumnType("INT");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("INT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("VARCHAR(1000)");

                    b.Property<int>("ModelId")
                        .HasColumnType("INT");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("INT");

                    b.Property<int>("ServiceStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INT")
                        .HasDefaultValueSql("1");

                    b.Property<int>("TransmissionId")
                        .HasColumnType("INT");

                    b.Property<int>("UserId")
                        .HasColumnType("INT");

                    b.HasKey("Id")
                        .HasName("PK_Service");

                    b.HasIndex("ColorId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("ModelId");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("TransmissionId");

                    b.HasIndex("UserId");

                    b.ToTable("Service", "Maintenance");
                });

            modelBuilder.Entity("Warshti.Entities.Maintenance.ServiceFault", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("FaultId")
                        .HasColumnType("INT");

                    b.Property<int>("ServiceId")
                        .HasColumnType("INT");

                    b.HasKey("Id")
                        .HasName("PK_ServiceFault");

                    b.HasIndex("FaultId");

                    b.HasIndex("ServiceId");

                    b.ToTable("ServiceFault", "Maintenance");
                });

            modelBuilder.Entity("Warshti.Entities.Maintenance.WorkShopImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<byte[]>("Photo")
                        .IsRequired()
                        .HasColumnType("VARBINARY(MAX)");

                    b.Property<int>("WorkShopId")
                        .HasColumnType("INT");

                    b.HasKey("Id")
                        .HasName("PK_WorkShopImage");

                    b.HasIndex("WorkShopId");

                    b.ToTable("WorkShopImage", "Maintenance");
                });

            modelBuilder.Entity("Warshti.Entities.Maintenance.WorkShopInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CommercialRegister")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Department")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("ElectonicPaymentAccount")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<string>("Facility")
                        .HasColumnType("VARCHAR(50)");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("NUMERIC(18,10)");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("NUMERIC(18,10)");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("VARBINARY(MAX)");

                    b.Property<string>("Sponsor")
                        .HasColumnType("VARCHAR(150)");

                    b.Property<int>("WorkShopId")
                        .HasColumnType("INT");

                    b.HasKey("Id")
                        .HasName("PK_WorkShopInfo");

                    b.HasIndex("WorkShopId")
                        .IsUnique();

                    b.ToTable("WorkShopInfo", "Maintenance");
                });

            modelBuilder.Entity("Warshti.Entities.WScore.Announcement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Announcements");
                });

            modelBuilder.Entity("Warshti.Entities.WScore.AnnouncementImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("AnnouncementId")
                        .HasColumnType("int");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("AnnouncementId");

                    b.ToTable("AnnouncementImages");
                });

            modelBuilder.Entity("Warshti.Entities.WScore.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("AnswerText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("UserId");

                    b.ToTable("Answers");
                });

            modelBuilder.Entity("Warshti.Entities.WScore.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("VARCHAR(2000)");

                    b.Property<DateTime>("MessageTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("ReceiverId")
                        .HasColumnType("INT");

                    b.Property<int>("SenderId")
                        .HasColumnType("INT");

                    b.HasKey("Id")
                        .HasName("PK_Chat");

                    b.HasIndex("ReceiverId");

                    b.HasIndex("SenderId");

                    b.ToTable("Chat", "WScore");
                });

            modelBuilder.Entity("Warshti.Entities.WScore.Faq", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Answer")
                        .IsRequired()
                        .HasColumnType("VARCHAR(2000)");

                    b.Property<string>("Question")
                        .IsRequired()
                        .HasColumnType("VARCHAR(2000)");

                    b.HasKey("Id")
                        .HasName("PK_Faq");

                    b.ToTable("Faq", "WScore");
                });

            modelBuilder.Entity("Warshti.Entities.WScore.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)");

                    b.HasKey("Id")
                        .HasName("PK_Language");

                    b.ToTable("Language", "WScore");
                });

            modelBuilder.Entity("Warshti.Entities.WScore.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("VARCHAR(500)");

                    b.Property<DateTime>("NotificationTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("DATETIME")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<int>("UserId")
                        .HasColumnType("INT");

                    b.HasKey("Id")
                        .HasName("PK_Notification");

                    b.HasIndex("UserId");

                    b.ToTable("Notification", "WScore");
                });

            modelBuilder.Entity("Warshti.Entities.WScore.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Questions");
                });

            modelBuilder.Entity("Warshti.Entities.WScore.QuestionImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionImages");
                });

            modelBuilder.Entity("Warshti.Entities.WScore.UserPaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("CardHolderName")
                        .IsRequired()
                        .HasColumnType("VARCHAR(150)");

                    b.Property<string>("CardNumber")
                        .IsRequired()
                        .HasColumnType("VARCHAR(25)");

                    b.Property<int>("Cvc")
                        .HasColumnType("INT");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("DATE");

                    b.Property<bool>("IsPreferred")
                        .HasColumnType("BIT");

                    b.Property<int>("PaymentMethodId")
                        .HasColumnType("INT");

                    b.Property<int>("UserId")
                        .HasColumnType("INT");

                    b.HasKey("Id")
                        .HasName("PK_UserPaymentMethod");

                    b.HasIndex("PaymentMethodId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPaymentMethod", "WScore");
                });

            modelBuilder.Entity("WScore.Entities.Identity.RefreshToken", b =>
                {
                    b.HasOne("WScore.Entities.Identity.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_RefreshToken_User")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WScore.Entities.Identity.RoleClaim", b =>
                {
                    b.HasOne("WScore.Entities.Identity.Role", "Role")
                        .WithMany("RoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("WScore.Entities.Identity.UserClaim", b =>
                {
                    b.HasOne("WScore.Entities.Identity.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WScore.Entities.Identity.UserLogin", b =>
                {
                    b.HasOne("WScore.Entities.Identity.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WScore.Entities.Identity.UserRole", b =>
                {
                    b.HasOne("WScore.Entities.Identity.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WScore.Entities.Identity.User", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WScore.Entities.Identity.UserToken", b =>
                {
                    b.HasOne("WScore.Entities.Identity.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Warshti.Entities.Entities.Maintenance.ServiceImage", b =>
                {
                    b.HasOne("Warshti.Entities.Maintenance.Service", "Service")
                        .WithMany("ServiceImages")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_ServiceImage_Service")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Warshti.Entities.Identity.UserSetting", b =>
                {
                    b.HasOne("Warshti.Entities.WScore.Language", "Language")
                        .WithMany("UserSettings")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_UserSetting_Language")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WScore.Entities.Identity.User", "User")
                        .WithOne("UserSetting")
                        .HasForeignKey("Warshti.Entities.Identity.UserSetting", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Warshti.Entities.Maintenance.Order", b =>
                {
                    b.HasOne("Warshti.Entities.Maintenance.Service", "Service")
                        .WithMany("Orders")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_Order_Service")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WScore.Entities.Identity.User", "Workshop")
                        .WithMany("Orders")
                        .HasForeignKey("WorkshopId")
                        .HasConstraintName("FK_Order_WorkShop")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Service");

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("Warshti.Entities.Maintenance.OrderStep", b =>
                {
                    b.HasOne("Warshti.Entities.Maintenance.Order", "Order")
                        .WithMany("OrderSteps")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_OrderStep_Order")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Warshti.Entities.Maintenance.Service", b =>
                {
                    b.HasOne("Warshti.Entities.Car.Color", "Color")
                        .WithMany("CarServices")
                        .HasForeignKey("ColorId")
                        .HasConstraintName("FK_Service_Color")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Warshti.Entities.Car.Company", "Company")
                        .WithMany("CarServices")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Service_Company")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Warshti.Entities.Maintenance.Department", "Department")
                        .WithMany("CarServices")
                        .HasForeignKey("DepartmentId")
                        .HasConstraintName("FK_Service_Department")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Warshti.Entities.Car.Model", "Model")
                        .WithMany("CarServices")
                        .HasForeignKey("ModelId")
                        .HasConstraintName("FK_Service_Model")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Warshti.Entities.Maintenance.PaymentMethod", "PaymentMethod")
                        .WithMany("CarServices")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("FK_Service_PaymentMethod")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Warshti.Entities.Car.Transmission", "Transmission")
                        .WithMany("CarServices")
                        .HasForeignKey("TransmissionId")
                        .HasConstraintName("FK_Service_Transmission")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WScore.Entities.Identity.User", "User")
                        .WithMany("Services")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Service_User")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("Company");

                    b.Navigation("Department");

                    b.Navigation("Model");

                    b.Navigation("PaymentMethod");

                    b.Navigation("Transmission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Warshti.Entities.Maintenance.ServiceFault", b =>
                {
                    b.HasOne("Warshti.Entities.Car.Fault", "Fault")
                        .WithMany("ServiceFaults")
                        .HasForeignKey("FaultId")
                        .HasConstraintName("FK_ServiceFault_Fault")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Warshti.Entities.Maintenance.Service", "Service")
                        .WithMany("ServiceFaults")
                        .HasForeignKey("ServiceId")
                        .HasConstraintName("FK_ServiceFault_Service")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Fault");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Warshti.Entities.Maintenance.WorkShopImage", b =>
                {
                    b.HasOne("WScore.Entities.Identity.User", "WorkShop")
                        .WithMany("WorkShopImages")
                        .HasForeignKey("WorkShopId")
                        .HasConstraintName("FK_WorkShopImage_WorkShop")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("WorkShop");
                });

            modelBuilder.Entity("Warshti.Entities.Maintenance.WorkShopInfo", b =>
                {
                    b.HasOne("WScore.Entities.Identity.User", "Workshop")
                        .WithOne("WorkShopInfo")
                        .HasForeignKey("Warshti.Entities.Maintenance.WorkShopInfo", "WorkShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Workshop");
                });

            modelBuilder.Entity("Warshti.Entities.WScore.Announcement", b =>
                {
                    b.HasOne("WScore.Entities.Identity.User", "User")
                        .WithMany("Announcements")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Warshti.Entities.WScore.AnnouncementImage", b =>
                {
                    b.HasOne("Warshti.Entities.WScore.Announcement", "Announcement")
                        .WithMany("AnnouncementImages")
                        .HasForeignKey("AnnouncementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Announcement");
                });

            modelBuilder.Entity("Warshti.Entities.WScore.Answer", b =>
                {
                    b.HasOne("Warshti.Entities.WScore.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WScore.Entities.Identity.User", "User")
                        .WithMany("Answers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Warshti.Entities.WScore.Chat", b =>
                {
                    b.HasOne("WScore.Entities.Identity.User", "Receiver")
                        .WithMany("ReceiverChats")
                        .HasForeignKey("ReceiverId")
                        .HasConstraintName("FK_Chat_Receiver")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WScore.Entities.Identity.User", "Sender")
                        .WithMany("SenderChats")
                        .HasForeignKey("SenderId")
                        .HasConstraintName("FK_Chat_Sender")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("Warshti.Entities.WScore.Notification", b =>
                {
                    b.HasOne("WScore.Entities.Identity.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_Notification_User")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Warshti.Entities.WScore.Question", b =>
                {
                    b.HasOne("WScore.Entities.Identity.User", "User")
                        .WithMany("Questions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Warshti.Entities.WScore.QuestionImage", b =>
                {
                    b.HasOne("Warshti.Entities.WScore.Question", "Question")
                        .WithMany("QuestionImages")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Warshti.Entities.WScore.UserPaymentMethod", b =>
                {
                    b.HasOne("Warshti.Entities.Maintenance.PaymentMethod", "PaymentMethod")
                        .WithMany("UserPaymentMethods")
                        .HasForeignKey("PaymentMethodId")
                        .HasConstraintName("FK_UserPaymentMethod_PaymentMethod")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("WScore.Entities.Identity.User", "User")
                        .WithMany("UserPaymentMethods")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK_UserPaymentMethod_User")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("PaymentMethod");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WScore.Entities.Identity.Role", b =>
                {
                    b.Navigation("RoleClaims");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("WScore.Entities.Identity.User", b =>
                {
                    b.Navigation("Announcements");

                    b.Navigation("Answers");

                    b.Navigation("Notifications");

                    b.Navigation("Orders");

                    b.Navigation("Questions");

                    b.Navigation("ReceiverChats");

                    b.Navigation("RefreshTokens");

                    b.Navigation("SenderChats");

                    b.Navigation("Services");

                    b.Navigation("UserClaims");

                    b.Navigation("UserLogins");

                    b.Navigation("UserPaymentMethods");

                    b.Navigation("UserRoles");

                    b.Navigation("UserSetting");

                    b.Navigation("UserTokens");

                    b.Navigation("WorkShopImages");

                    b.Navigation("WorkShopInfo");
                });

            modelBuilder.Entity("Warshti.Entities.Car.Color", b =>
                {
                    b.Navigation("CarServices");
                });

            modelBuilder.Entity("Warshti.Entities.Car.Company", b =>
                {
                    b.Navigation("CarServices");
                });

            modelBuilder.Entity("Warshti.Entities.Car.Fault", b =>
                {
                    b.Navigation("ServiceFaults");
                });

            modelBuilder.Entity("Warshti.Entities.Car.Model", b =>
                {
                    b.Navigation("CarServices");
                });

            modelBuilder.Entity("Warshti.Entities.Car.Transmission", b =>
                {
                    b.Navigation("CarServices");
                });

            modelBuilder.Entity("Warshti.Entities.Maintenance.Department", b =>
                {
                    b.Navigation("CarServices");
                });

            modelBuilder.Entity("Warshti.Entities.Maintenance.Order", b =>
                {
                    b.Navigation("OrderSteps");
                });

            modelBuilder.Entity("Warshti.Entities.Maintenance.PaymentMethod", b =>
                {
                    b.Navigation("CarServices");

                    b.Navigation("UserPaymentMethods");
                });

            modelBuilder.Entity("Warshti.Entities.Maintenance.Service", b =>
                {
                    b.Navigation("Orders");

                    b.Navigation("ServiceFaults");

                    b.Navigation("ServiceImages");
                });

            modelBuilder.Entity("Warshti.Entities.WScore.Announcement", b =>
                {
                    b.Navigation("AnnouncementImages");
                });

            modelBuilder.Entity("Warshti.Entities.WScore.Language", b =>
                {
                    b.Navigation("UserSettings");
                });

            modelBuilder.Entity("Warshti.Entities.WScore.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("QuestionImages");
                });
#pragma warning restore 612, 618
        }
    }
}
